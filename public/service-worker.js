'use strict';

var createServiceWorker = function(e){const o=e&&e.noconsole;!o&&console.log("[devtools-service-worker] 启动",e);const s=new Map;chrome.runtime.onConnect.addListener((function(e){!o&&console.log("[devtools-service-worker] 开始连接插件",e);const r=(e,r)=>{if(!o&&console.log(`[devtools-service-worker] extensionListener 收到来自${e.source}的数据`,e,r),"panel:connect"===e.action)!o&&console.log("[devtools-service-worker] 握手回调",e.data.tabId),s.set(e.data.tabId,r),r.postMessage({sender:r.sender,message:{action:"panel:connect",source:"service-worker",target:"panel",route:"panel",track:["service-worker"],data:{result:{tabId:e.data.tabId}},requestId:""}});};e.onMessage.addListener(r),e.onDisconnect.addListener((function(t){!o&&console.log("[devtools-service-worker] 插件断开",t),e.onMessage.removeListener(r),t.sender?.tab?.id&&s.delete(t.sender?.tab?.id);}));})),chrome.runtime.onMessage.addListener(((r,t)=>{!o&&console.log("[devtools-service-worker]  收到来自content-script的数据",r,t);const n=s.get(t.tab?.id);if(n&&e.onContentScript?.(r,n,t),"service-worker"===r.route){const e={message:{...r,route:"panel",track:[...r?.track||[],"service-worker"]},sender:t};!o&&console.log("[devtools-service-worker]  传送到插件panel",n,r,t,e),n?.postMessage(e);}}));};

createServiceWorker({ noconsole: false });
